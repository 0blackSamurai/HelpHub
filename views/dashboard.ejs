<%- include('./partials/header') %>

<div class="dashboard-container">
    <div class="dashboard-header">
        <h1>Admin Dashboard</h1>
        <div class="dashboard-actions">
            <a href="/tickets/analytics" class="btn-primary">
                <i class="fas fa-chart-line"></i> View Analytics
            </a>
            <a href="/user-management" class="btn-secondary">
                <i class="fas fa-users-cog"></i> Manage Users
            </a>
        </div>
    </div>
    
    <div class="tickets-section">
        <h2>All Tickets</h2>
        
        <div class="filters">
            <div class="filter-group">
                <label for="statusFilter">Status:</label>
                <select id="statusFilter" onchange="filterTickets()">
                    <option value="all">All</option>
                    <option value="Åpen">Open</option>
                    <option value="Under arbeid">In Progress</option>
                    <option value="Løst">Resolved</option>
                    <option value="Closed">Closed</option>
                </select>
            </div>
            
            <div class="filter-group">
                <label for="priorityFilter">Priority:</label>
                <select id="priorityFilter" onchange="filterTickets()">
                    <option value="all">All</option>
                    <option value="High">High</option>
                    <option value="Medium">Medium</option>
                    <option value="Low">Low</option>
                </select>
            </div>
             
            <div class="filter-group">
                <label for="categoryFilter">Category:</label>
                <select id="categoryFilter" onchange="filterTickets()">
                    <option value="all">All</option>
                    <option value="Bug">Bug</option>
                    <option value="Feature Request">Feature Request</option>
                    <option value="Support">Support</option>
                </select>
            </div>
            
            <div class="filter-group">
                <label for="assignmentFilter">Assigned to:</label>
                <select id="assignmentFilter" onchange="filterTickets()">
                    <option value="all">All</option>
                    <option value="unassigned">Unassigned</option>
                    <option value="1st Line">1st Line</option>
                    <option value="2nd Line">2nd Line</option>
                </select>
            </div>
        </div>
        
        <div class="table-container">
            <table id="ticketsTable">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Title</th>
                        <th>Submitted by</th>
                        <th>Status</th>
                        <th>Priority</th>
                        <th>Category</th>
                        <th>Assigned to</th>
                        <th>Created</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% tickets.forEach(ticket => { %>
                        <tr data-ticket-id="<%= ticket._id %>"
                            data-status="<%= ticket.status %>"
                            data-priority="<%= ticket.priority %>"
                            data-category="<%= ticket.category %>"
                            data-assigned="<%= ticket.assignedRole || 'unassigned' %>">
                            <td><%= ticket._id.toString().slice(-6) %></td>
                            <td><a href="/tickets/view/<%= ticket._id %>" class="ticket-title"><%= ticket.title %></a></td>
                            <td><%= ticket.userId.username %></td>
                            <td>
                                <span class="status-badge status-<%= ticket.status.toLowerCase().replace(/\s+/g, '-') %>">
                                    <%= ticket.status %>
                                </span>
                            </td>
                            <td>
                                <span class="priority-badge priority-<%= ticket.priority.toLowerCase() %>">
                                    <%= ticket.priority %>
                                </span>
                            </td>
                            <td>
                                <span class="category-badge category-<%= ticket.category.toLowerCase().replace(/\s+/g, '-') %>">
                                    <%= ticket.category %>
                                </span>
                            </td>
                            <td>
                                <% if (ticket.assignedTo) { %>
                                    <span class="assigned-badge role-<%= ticket.assignedRole.toLowerCase().replace(/\s+/g, '-') %>">
                                        <%= ticket.assignedRole %>
                                    </span>
                                <% } else { %>
                                    <span class="unassigned-badge">Unassigned</span>
                                <% } %>
                            </td>
                            <td><%= new Date(ticket.createdAt).toLocaleDateString() %></td>
                            <td class="actions-cell">
                                <button class="btn-view" onclick="location.href='/tickets/view/<%= ticket._id %>'">
                                    <i class="fas fa-eye"></i>
                                </button>
                                <button class="btn-assign" onclick="openAssignModal('<%= ticket._id %>')">
                                    <i class="fas fa-user-plus"></i>
                                </button>
                                <% if (ticket.status === 'Løst' || ticket.status === 'Closed') { %>
                                    <button class="btn-delete" onclick="deleteTicket('<%= ticket._id %>')">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                <% } %>
                            </td>
                        </tr>
                    <% }) %>
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Assign Ticket Modal -->
<div id="assignModal" class="modal">
    <div class="modal-content">
        <span class="close" onclick="closeModal()">&times;</span>
        <h2>Assign Ticket</h2>
        <form id="assignForm">
            <input type="hidden" id="ticketId">
            
            <div class="form-group">
                <label for="supportLevel">Support Level:</label>
                <select id="supportLevel" onchange="loadSupportStaff()">
                    <option value="">Select support level</option>
                    <option value="1st Line">1st Line Support</option>
                    <option value="2nd Line">2nd Line Support</option>
                </select>
            </div>
            
            <div class="form-group">
                <label for="assignedUser">Assign to:</label>
                <select id="assignedUser" disabled>
                    <option value="">Select a team member</option>
                </select>
            </div>
            
            <div class="form-actions">
                <button type="button" class="btn-cancel" onclick="closeModal()">Cancel</button>
                <button type="button" class="btn-submit" onclick="assignTicket()">Assign</button>
            </div>
        </form>
    </div>
</div>

<style>
    .dashboard-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }
    
    .dashboard-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
    }
    
    .dashboard-actions {
        display: flex;
        gap: 10px;
    }
    
    .btn-primary, .btn-secondary {
        padding: 8px 16px;
        border-radius: 4px;
        text-decoration: none;
    }
    
    .btn-primary {
        background-color: #2196F3;
        color: white;
    }
    
    .btn-secondary {
        background-color: #555;
        color: white;
    }
    
    .tickets-section {
        background-color: #2a2a2a;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }
    
    .filters {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
        margin-bottom: 20px;
    }
    
    .filter-group {
        display: flex;
        align-items: center;
    }
    
    .filter-group label {
        margin-right: 8px;
        color: #ccc;
    }
    
    .filter-group select {
        padding: 6px 10px;
        background-color: #333;
        border: 1px solid #555;
        color: #fff;
        border-radius: 4px;
    }
    
    .table-container {
        overflow-x: auto;
    }
    
    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }
    
    th, td {
        padding: 12px 15px;
        text-align: left;
        border-bottom: 1px solid #444;
    }
    
    th {
        background-color: #333;
        color: #fff;
        position: sticky;
        top: 0;
    }
    
    tr:hover {
        background-color: #2d2d2d;
    }
    
    .ticket-title {
        color: #4da6ff;
        text-decoration: none;
        font-weight: 500;
    }
    
    .status-badge, .priority-badge, .category-badge, .assigned-badge, .unassigned-badge {
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 0.8rem;
        display: inline-block;
        white-space: nowrap;
    }
    
    .status-åpen {
        background-color: #2196F3;
        color: white;
    }
    
    .status-under-arbeid {
        background-color: #ff9800;
        color: white;
    }
    
    .status-løst {
        background-color: #4CAF50;
        color: white;
    }
    
    .status-closed {
        background-color: #9e9e9e;
        color: white;
    }
    
    .priority-high {
        background-color: #f44336;
        color: white;
    }
    
    .priority-medium {
        background-color: #ff9800;
        color: white;
    }
    
    .priority-low {
        background-color: #4CAF50;
        color: white;
    }
    
    .category-bug {
        background-color: #f44336;
        color: white;
    }
    
    .category-feature-request {
        background-color: #ff9800;
        color: white;
    }
    
    .category-support {
        background-color: #4CAF50;
        color: white;
    }
    
    .role-1st-line {
        background-color: #4CAF50;
        color: white;
    }
    
    .role-2nd-line {
        background-color: #ff9800;
        color: white;
    }
    
    .unassigned-badge {
        background-color: #777;
        color: white;
    }
    
    .actions-cell {
        display: flex;
        gap: 5px;
    }
    
    .btn-view, .btn-assign, .btn-delete {
        border: none;
        background: none;
        color: #ccc;
        cursor: pointer;
        font-size: 1rem;
        padding: 5px;
        border-radius: 4px;
        transition: all 0.2s;
    }
    
    .btn-view:hover {
        color: #2196F3;
        background-color: rgba(33, 150, 243, 0.1);
    }
    
    .btn-assign:hover {
        color: #4CAF50;
        background-color: rgba(76, 175, 80, 0.1);
    }
    
    .btn-delete:hover {
        color: #f44336;
        background-color: rgba(244, 67, 54, 0.1);
    }
    
    /* Modal styles */
    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.7);
        overflow: auto;
    }
    
    .modal-content {
        background-color: #2a2a2a;
        margin: 10% auto;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        max-width: 500px;
        position: relative;
    }
    
    .close {
        position: absolute;
        right: 20px;
        top: 15px;
        color: #aaa;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
    }
    
    .close:hover {
        color: #fff;
    }
    
    .form-group {
        margin-bottom: 20px;
    }
    
    .form-group label {
        display: block;
        margin-bottom: 8px;
        color: #ccc;
    }
    
    .form-group select {
        width: 100%;
        padding: 8px 12px;
        border-radius: 4px;
        background-color: #333;
        border: 1px solid #555;
        color: #fff;
    }
    
    .form-actions {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        margin-top: 20px;
    }
    
    .btn-cancel, .btn-submit {
        padding: 8px 16px;
        border-radius: 4px;
        cursor: pointer;
        border: none;
    }
    
    .btn-cancel {
        background-color: #555;
        color: white;
    }
    
    .btn-submit {
        background-color: #2196F3;
        color: white;
    }
    
    .btn-submit:hover {
        background-color: #0b7dda;
    }
    
    .btn-cancel:hover {
        background-color: #444;
    }
    
    @media (max-width: 992px) {
        .dashboard-header {
            flex-direction: column;
            align-items: flex-start;
        }
        
        .dashboard-actions {
            margin-top: 15px;
        }
    }
    
    @media (max-width: 768px) {
        .filters {
            flex-direction: column;
            gap: 10px;
        }
        
        .filter-group {
            width: 100%;
        }
        
        .filter-group select {
            width: 100%;
        }
    }
</style>

<script>
    // Filter tickets
    function filterTickets() {
        const statusFilter = document.getElementById('statusFilter').value;
        const priorityFilter = document.getElementById('priorityFilter').value;
        const categoryFilter = document.getElementById('categoryFilter').value;
        const assignmentFilter = document.getElementById('assignmentFilter').value;
        
        const rows = document.querySelectorAll('#ticketsTable tbody tr');
        
        rows.forEach(row => {
            const status = row.dataset.status;
            const priority = row.dataset.priority;
            const category = row.dataset.category;
            const assigned = row.dataset.assigned;
            
            let showRow = true;
            
            if (statusFilter !== 'all' && status !== statusFilter) {
                showRow = false;
            }
            
            if (priorityFilter !== 'all' && priority !== priorityFilter) {
                showRow = false;
            }
            
            if (categoryFilter !== 'all' && category !== categoryFilter) {
                showRow = false;
            }
            
            if (assignmentFilter !== 'all') {
                if (assignmentFilter === 'unassigned' && assigned !== 'unassigned') {
                    showRow = false;
                } else if (assignmentFilter !== 'unassigned' && assigned !== assignmentFilter) {
                    showRow = false;
                }
            }
            
            row.style.display = showRow ? '' : 'none';
        });
    }
    
    // Modal functions
    function openAssignModal(ticketId) {
        document.getElementById('ticketId').value = ticketId;
        document.getElementById('supportLevel').selectedIndex = 0;
        document.getElementById('assignedUser').innerHTML = '<option value="">Select a team member</option>';
        document.getElementById('assignedUser').disabled = true;
        document.getElementById('assignModal').style.display = 'block';
    }
    
    function closeModal() {
        document.getElementById('assignModal').style.display = 'none';
    }
    
    // Load support staff based on selected role
    async function loadSupportStaff() {
        const supportLevel = document.getElementById('supportLevel').value;
        const assignedUserSelect = document.getElementById('assignedUser');
        
        if (!supportLevel) {
            assignedUserSelect.disabled = true;
            assignedUserSelect.innerHTML = '<option value="">Select a team member</option>';
            return;
        }
        
        try {
            const response = await fetch('/users/support-staff');
            const staff = await response.json();
            
            assignedUserSelect.innerHTML = '<option value="">Select a team member</option>';
            
            const filteredStaff = staff.filter(user => user.role === supportLevel);
            
            filteredStaff.forEach(user => {
                const option = document.createElement('option');
                option.value = user._id;
                option.textContent = user.username;
                assignedUserSelect.appendChild(option);
            });
            
            assignedUserSelect.disabled = filteredStaff.length === 0;
            
            if (filteredStaff.length === 0) {
                const option = document.createElement('option');
                option.value = "";
                option.textContent = "No staff with this role";
                assignedUserSelect.appendChild(option);
            }
            
        } catch (error) {
            console.error('Error loading support staff:', error);
        }
    }
    
    // Assign ticket to staff member
    async function assignTicket() {
        const ticketId = document.getElementById('ticketId').value;
        const supportLevel = document.getElementById('supportLevel').value;
        const userId = document.getElementById('assignedUser').value;
        
        if (!ticketId || !supportLevel || !userId) {
            alert('Please select a support level and team member');
            return;
        }
        
        try {
            const response = await fetch('/tickets/assign', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    ticketId,
                    userId,
                    role: supportLevel
                })
            });
            
            if (response.ok) {
                closeModal();
                alert('Ticket assigned successfully!');
                location.reload(); // Reload to update the UI
            } else {
                const error = await response.json();
                alert(error.message || 'Failed to assign ticket');
            }
        } catch (error) {
            console.error('Error assigning ticket:', error);
            alert('An error occurred. Please try again.');
        }
    }
    
    // Delete ticket
    async function deleteTicket(ticketId) {
        if (!confirm('Are you sure you want to delete this ticket? This action cannot be undone.')) {
            return;
        }
        
        try {
            const response = await fetch(`/tickets/delete/${ticketId}`, {
                method: 'DELETE'
            });
            
            if (response.ok) {
                // Remove the row from the table
                const row = document.querySelector(`tr[data-ticket-id="${ticketId}"]`);
                if (row) {
                    row.remove();
                }
            } else {
                const error = await response.text();
                alert(error || 'Failed to delete ticket');
            }
        } catch (error) {
            console.error('Error deleting ticket:', error);
            alert('An error occurred. Please try again.');
        }
    }
    
    // Close modal when clicking outside
    window.onclick = function(event) {
        const modal = document.getElementById('assignModal');
        if (event.target === modal) {
            closeModal();
        }
    }
</script>

<%- include('./partials/footer') %>